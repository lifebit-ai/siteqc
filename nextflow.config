/*
 * -------------------------------------------------
 *  lifebit-ai/siteqc Nextflow config file
 * -------------------------------------------------
 * Default config options for all environments.
 */

manifest {
  name = 'lifebit-ai/siteqc'
  author = 'Daniel Rhodes, Christina Chatzipantsiou, Vlad-Dembrovskyi'
  homePage = 'https://github.com/nf-core/siteqc'
  description = "Genomics England's workflow for variant annotation and quality control"
  mainScript = 'main.nf'
  nextflowVersion = '>=19.10.0'
  version = '1.0dev'
}

// Global default params, used in configs
params {

  // Workflow flags
  outdir = 'results'
  publish_dir_mode = 'copy'

  // Files
  input = false
  xx_sample_ids = false
  xy_sample_ids = false
  
  // Values

  // Boilerplate options
  name = false
  monochrome_logs = false
  help = false
  tracedir = "${params.outdir}/pipeline_info"
  config_profile_description = false
  config_profile_contact = false
  config_profile_url = false

  // Defaults only, expecting to be overwritten
  max_memory = 128.GB
  max_cpus = 16
  max_time = 240.h

}

// Container slug. Stable releases should specify release tag!
// Developmental code should specify :dev
process.container = 'lifebitai/siteqc:1.0dev'


profiles {
  standard { includeConfig 'conf/aws.config' }
  // Just in case we forget there is more than one test:
  test { includeConfig 'conf/test1.config' }
  // All tests:
  test1 { includeConfig 'conf/test1.config' }
  test2 { includeConfig 'conf/test2.config' }
  test3 { includeConfig 'conf/test3.config' }
  test4 { includeConfig 'conf/test4.config' }

}


// Export these variables to prevent local Python/R libraries from conflicting with those in the container
env {
  PYTHONNOUSERSITE = 1
  R_PROFILE_USER = "/.Rprofile"
  R_ENVIRON_USER = "/.Renviron"
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

timeline {
  enabled = true
  file = "${params.tracedir}/execution_timeline.html"
}
report {
  enabled = true
  file = "${params.tracedir}/execution_report.html"
}
trace {
  enabled = true
  file = "${params.tracedir}/execution_trace.txt"
}
dag {
  enabled = true
  file = "${params.tracedir}/pipeline_dag.svg"
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
